export LS_OPTIONS='--color=auto'
export CLICOLOR='Yes'
export LSCOLORS='exgxFxdxCxdxgxhbadexex'

autoload -U colors && colors

THEME_RVM_BEFORE=""
THEME_RVM_AFTER=""
RVM_PROMPT_OPTIONS="gemset"
rvm_prompt_info() {
  [ -f $HOME/.rvm/bin/rvm-prompt ] || return
  local rvm_info=$($HOME/.rvm/bin/rvm-prompt ${RVM_PROMPT_OPTIONS} 2>/dev/null)
  print -n "${THEME_RVM_BEFORE}${rvm_info}${THEME_RVM_AFTER}"
}

PROJECT_HOME="$HOME/Projects"
PROJECT_FORMAT="\\1"
HOME_FORMAT="~"
formatted_path() {
  print -n $PWD|sed -e "s-$PROJECT_HOME/\([^\/]*\)-$PROJECT_FORMAT-" -e "s-$HOME-$HOME_FORMAT-"
}

THEME_JOB_BEFORE="%F{yellow}"
THEME_JOB_AFTER="%f"
THEME_JOB_ICON="⚙"
job_prompt_info() {
  [[ $(jobs -l | wc -l) -gt 0 ]] && print -n "${THEME_JOB_BEFORE}${THEME_JOB_ICON}${THEME_JOB_AFTER}"
}

_git_repo_path() {
  git rev-parse --git-dir 2>/dev/null
}

_in_git_repo() {
  local repo_path=$(_git_repo_path)
  [[ -d $repo_path ]] && [[ $repo_path != "~" ]] && [[ $repo_path != "$HOME/.git" ]]
}

_git_current_branch() {
  if _in_git_repo; then
    git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'
  fi
}

_git_head_commit() {
  git rev-parse --short HEAD 2>/dev/null
}

THEME_GIT_BEFORE_BRANCH="%F{white}"
THEME_GIT_AFTER_BRANCH=""
git_branch() {
  local branch=$(_git_current_branch)
  [[ -n $branch ]] && print -n "${THEME_GIT_BEFORE_BRANCH}${branch}${THEME_GIT_AFTER_BRANCH}"
}

THEME_GIT_BEFORE_SHA="%B%F{black}"
THEME_GIT_AFTER_SHA="%b"
git_sha() {
# _git_head_commit
  local sha=$(_git_head_commit)
  [[ -n $sha ]] && print -n "${THEME_GIT_BEFORE_SHA}${sha}${THEME_GIT_AFTER_SHA}"
}

THEME_GIT_DIRTY_BEFORE=" %F{red}"
THEME_GIT_DIRTY_AFTER="%f"
THEME_GIT_ICON_DIRTY="★"
git_dirty() {
  local dirty;
  if [[ -n $(git ls-files -m) ]]; then
    dirty=$THEME_GIT_ICON_DIRTY
  fi
  [[ -n $dirty ]] && print -n "${THEME_GIT_DIRTY_BEFORE}${dirty}${THEME_GIT_DIRTY_AFTEr}"
}

THEME_GIT_FLAGS_BEFORE=""
THEME_GIT_FLAGS_AFTER=""
THEME_GIT_ICON_BISECT="+bisect"
THEME_GIT_ICON_MERGE="+merge"
THEME_GIT_ICON_REBASE="+rebase"
git_flags() {
  local flags;
  local repo_path=$(_git_repo_path)

  if [[ -f $repo_path/BISECT_LOG ]]; then
    flags=$THEME_GIT_ICON_BISECT
  elif [[ -f $repo_path/MERGE_HEAD ]]; then
    flags=$THEME_GIT_ICON_MERGE
  elif [[ -f $repo_path/rebase ]] ||
       [[ -f $repo_path/rebase-apply ]] ||
       [[ -f $repo_path/rebase-merge ]] ||
       [[ -f .dotest ]];
  then
    flags=$THEME_GIT_ICON_REBASE
  fi

  [[ -n $flags ]] && print -n "${THEME_GIT_FLAGS_BEFORE}${flags}${THEME_GIT_FLAGS_AFTER}"
}

THEME_GIT_BEFORE=""
THEME_GIT_AFTER=""
git_prompt_info () {
  local icon;
  local branch;
  local sha;
  local flags;
  local prompt;

  if _in_git_repo; then
    branch=$(git_branch)
    sha=$(git_sha)
    flags=$(git_flags)
    icon=$(git_dirty)
    prompt="${branch}${flags}${sha}${icon}"
  fi

  [[ -n $prompt ]] && print -n "${THEME_GIT_BEFORE}${prompt}${THEME_GIT_AFTER}"
}

VI_PROMPT_INFO=""
THEME_VI_BEFORE="%F{magenta}"
THEME_VI_AFTER="%f"
THEME_VI_ICON_MODE=" ☰"
vi_prompt_info() {
  print -n "${THEME_VI_BEFORE}${VI_PROMPT_INFO}${THEME_VI_AFTER}"
}

function zle-keymap-select {
  VI_PROMPT_INFO="${${KEYMAP/vicmd/$THEME_VI_ICON_MODE}/(main|viins)/}"
  zle reset-prompt
}

zle -N zle-keymap-select

#usage: title short_tab_title looooooooooooooooooooooggggggg_windows_title
#http://www.faqs.org/docs/Linux-mini/Xterm-Title.html#ss3.1
#Fully support screen, iterm, and probably most modern xterm and rxvt
#Limited support for Apple Terminal (Terminal can't set window or tab separately)
#Shameless taken from: https://github.com/robbyrussell/oh-my-zsh
function title {
  if [[ "$DISABLE_AUTO_TITLE" == "true" ]] || [[ "$EMACS" == *term* ]]; then
    return
  fi
  if [[ "$TERM" == screen* ]]; then
    print -Pn "\ek$1:q\e\\" #set screen hardstatus, usually truncated at 20 chars
  elif [[ "$TERM" == xterm* ]] || [[ $TERM == rxvt* ]] || [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
    print -Pn "\e]2;$2:q\a" #set window name
    print -Pn "\e]1;$1:q\a" #set icon (=tab) name (will override window name on broken terminal)
  fi
}

THEME_TERM_TAB_TITLE_IDLE="%15<..<%~%<<" #15 char left truncated PWD
THEME_TERM_TITLE_IDLE="%n@%m: %~"

#Appears when you have the prompt
function omz_termsupport_precmd {
  title $THEME_TERM_TAB_TITLE_IDLE $THEME_TERM_TITLE_IDLE
}

#Appears at the beginning of (and during) of command execution
function omz_termsupport_preexec {
  emulate -L zsh
  setopt extended_glob
  local CMD=${1[(wr)^(*=*|sudo|ssh|rake|-*)]} #cmd name only, or if this is sudo or ssh, the next cmd
  title "$CMD" "%100>...>${2:gs/%/%%}%<<"
}

autoload -U add-zsh-hook
add-zsh-hook precmd  omz_termsupport_precmd
add-zsh-hook preexec omz_termsupport_preexec
