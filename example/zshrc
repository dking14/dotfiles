# setup our env to point to the dotfiles
DOTFILES=~/.dotfiles
ZSH=~/.zsh
ZSH_THEME=default
EDITOR=vim
set -o vi

plugins=(brew cap gem heroku osx p h x tmux)

# load our zsh environment
[[ -f ~/.zsh/init.sh ]] && . ~/.zsh/init.sh

# customize like a mofo!

# Custom matcher for my projects colder
#PATH_MATCHERS+=("~/Projects")
#PATH_REPLACER+=("%B%F{yellow}projects%b")

# Custom prompt color
THEME_PROMPT_COLOR="yellow"

# Add user and host before the path
THEME_PATH_BEFORE="%n@%m "

# Used in the `finddir` command
export FINDDIR_SEARCH_PATHS="~/Projects:~/XCode"

# Some common aliases
#alias less='less -R'
#alias -g ls="ls $LS_OPTIONS"
#alias cdd='cd ~/Desktop'
#alias c='cd /usr/local/Cellar'
#alias bc='bundle console'
#alias fm=foreman
#alias fms="foreman start"
#alias bower='noglob bower'
#alias rake='noglob rake'
#alias c='cd /usr/local/Cellar'
#alias grep='pcregrep --color=auto'

# Tmux (use with tmux plugin)
#alias tml="tmux list-sessions"
#alias tma=tmux-attach-or-new
#alias tms=tmux-force-switch
#alias tmd="tmux detach"
#alias tmx="tmux kill-session -t"

# Tig
#alias ts='tig status'
#alias tb='tig blame'
#alias ta='tig --all'
#alias ts='tig status'
#alias tg='tig grep'
#function tl(){
  #$(git log --all --decorate --format='commit %h %an: %s' $* | tig)
#}

# Some random helpers

# export FUZZY_SEARCH_PATHS="~/Projects:~/XCode:~/Sites/apps:~/Sites/gems:~/Sites"

# # FZF: cd to `FUZZY_SEARCH_PATHS`
# cds() {
# local dir=$(cat << EOS | ruby | fzf -1 -e -0 --query=$1
#   (ENV["FUZZY_SEARCH_PATHS"]||"").split(":").each{|p| puts Dir["#{File.expand_path(p)}/*"]}
# EOS)
# cd "$dir"
# }

# # FZF: git checkout
# co() {
#   local query=$1
#   local flags

#   if [[ $1 =~ ^\- ]]; then
#     flags=${@:1:-1}
#     query=${@[-1]}
#   fi

#   if [[ $query =~ /^- ]]; then
#     flags="$flags $query"
#     query=""
#   fi

#   local branch=$(cat << EOS | ruby | fzf -1 +s -i $flags --query=$query
#     puts %x{git branch -a}.split.map{|b| b.split('/').last}.reject{|b|['*','HEAD','->'].include?(b)}.uniq.sort_by{|b|b.to_s.scan(%r/\\d+/o).map(&:to_i)}
# EOS)

#   if [[ $branch ]]; then
#     [[ -f Gemfile.lock ]] && git checkout Gemfile.lock 2>/dev/null
#     git checkout $branch
#   fi
# }

# # FZF: edit gem
# eb() {
#   local gem

#   if [[ -f Gemfile ]]; then
#     gem=$(bundle show|grep -v "^Gems"|sed -e 's/([^()]*)//g'|sed -e 's/[ *]*//g'|fzf -1 --query=$1)
#     [[ $gem ]] && EDITOR="subl -a" bundle open $gem
#   else
#     echo "No Gemfile found!"
#   fi
# }

# # FZF: edit file
# ef() {
#   local file
#   file=$(fzf --query="$1" --select-1 --exit-0)
#   [ -n "$file" ] && subl -a "$file"
# }

# # FZF: cd
# cdf() {
#   local dir
#   dir=$(find ${1:-*} -path '*/\.*' -prune \
#                   -o -type d -print 2> /dev/null | fzf +m) &&
#   cd "$dir"
# }

# # FZF: fuzzy kill process
# fkill() {
#   ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
# }

# # Search bundle paths for something
# function back() {
#   ack "$@" `bundle show --paths`
# }

# # Dump pg database
# # Usage: dbdump DBNAME > DUMPFILE
# function dbdump() {
#   DBUSER=${DBUSER:-postgres} # default to postgres
#   pg_dump -Fc --no-acl --no-owner -h localhost -U $DBUSER $@
# }

# # Restore pg database
# # Usage: dbrestore DBNAME < DUMPFILE
# function dbrestore() {
#   DBHOST=${DBHOST:-localhost}
#   DBUSER=${DBUSER:-postgres}
#   pg_restore --verbose --clean --no-acl --no-owner -h $DBHOST -U $DBUSER -d $@
# }
